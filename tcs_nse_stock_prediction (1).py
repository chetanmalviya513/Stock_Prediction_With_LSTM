# -*- coding: utf-8 -*-
"""TCS_NSE Stock Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ez8GXTcULo1oBAaRlqcX3HXfLj6Xy6-M
"""

#Import the Libraries
import pandas as pd
import numpy as np
import datetime 
from sklearn import datasets
import pandas_datareader as web
from pandas.io.formats.style_render import DataFrame
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from sklearn.model_selection import train_test_split
from keras.layers import Dense, Dropout, LSTM, Bidirectional
import matplotlib.pyplot as plt
#plt.style.use('fivethirtyeight')

from google.colab import files
dataset = files.upload()

Tcs_stock = pd.read_csv("TCS.NS (1).csv")
Tcs_stock.head()

Tcs_stock.shape

Tcs_stock.info()

Tcs_stock = Tcs_stock[['Date','Open','Close']] # Extracting required columns
Tcs_stock['Date'] = pd.to_datetime(Tcs_stock['Date'].apply(lambda x: x.split()[0])) # Selecting only date
Tcs_stock.set_index('Date',drop=True,inplace=True) # Setting date column as index
Tcs_stock.head()

fg, ax =plt.subplots(1,2,figsize=(20,7))
ax[0].plot(Tcs_stock ['Open'],label='Open',color='green')
ax[0].set_xlabel('Date',size=15)
ax[0].set_ylabel('Price',size=15)
ax[0].legend()
ax[1].plot(Tcs_stock ['Close'],label='Close',color='red')
ax[1].set_xlabel('Date',size=15)
ax[1].set_ylabel('Price',size=15)
ax[1].legend()
fg.show()

from sklearn.preprocessing import MinMaxScaler
MMS = MinMaxScaler()
Tcs_stock[Tcs_stock.columns] = MMS.fit_transform(Tcs_stock)

# Selecting 80 % for training and 20 % for testing
training_size = round(len(Tcs_stock ) * 0.80)
training_size

train_data = Tcs_stock [:training_size]
test_data  = Tcs_stock [training_size:]
train_data.shape, Tcs_stock.shape

# Function to create sequence of data for training and testing
def create_sequence(dataset):
  sequences = []
  labels = []

  start_idx = 0

  for stop_idx in range(50,len(dataset)): # Selecting 50 rows at a time
    sequences.append(dataset.iloc[start_idx:stop_idx])
    labels.append(dataset.iloc[stop_idx])
    start_idx += 1
  return (np.array(sequences),np.array(labels))

train_seq, train_label = create_sequence(train_data)
test_seq, test_label = create_sequence(test_data)

train_seq.shape, train_label.shape, test_seq.shape, test_label.shape

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape = (train_seq.shape[1], train_seq.shape[2])))

model.add(Dropout(0.1)) 
model.add(LSTM(units=50))

model.add(Dense(2))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])

model.summary()

model.fit(train_seq, train_label, epochs=80,validation_data=(test_seq, test_label), verbose=1)

test_predicted = model.predict(test_seq)
test_predicted[:20]

test_inverse_predicted = MMS.inverse_transform(test_predicted)
test_inverse_predicted[:20]

# Merging actual and predicted data for better visualization

gs_slic_data = pd.concat([Tcs_stock.iloc[-312:].copy(),pd.DataFrame(test_inverse_predicted,columns=['Open_predicted','Close_predicted'],index=Tcs_stock.iloc[-312:].index)], axis=1)

gs_slic_data[['Open','Close']] =MMS.inverse_transform(gs_slic_data[['Open','Close']]) # Inverse scaling

gs_slic_data.head(10)

gs_slic_data[['Open','Open_predicted']].plot(figsize=(20,10))
plt.xticks(rotation=45)
plt.xlabel('Date',size=40)
plt.ylabel('Stock Price',size=50)
plt.title('Actual vs Predicted for open price',size=40)
plt.show()

gs_slic_data[['Close','Close_predicted']].plot(figsize=(20,10))
plt.xticks(rotation=45)
plt.xlabel('Date',size=40)
plt.ylabel('Stock Price',size=40)
plt.title('Actual vs Predicted for close price',size=45)
plt.show()

# Creating a dataframe and adding 10 days to existing index 

gs_slic_data = gs_slic_data.append(pd.DataFrame(columns=gs_slic_data.columns,index=pd.date_range(start=gs_slic_data.index[-1], periods=11, freq='D', closed='right')))

gs_slic_data['2021-04-01	':'2021-05-10']

upcoming_prediction = pd.DataFrame(columns=['Open','Close'],index=gs_slic_data.index)
upcoming_prediction.index=pd.to_datetime(upcoming_prediction.index)

curr_seq = test_seq[-1:]

for i in range(-10,0):
  up_pred = model.predict(curr_seq)
  upcoming_prediction.iloc[i] = up_pred
  curr_seq = np.append(curr_seq[0][1:],up_pred,axis=0)
  curr_seq = curr_seq.reshape(test_seq[-1:].shape)

upcoming_prediction[['Open','Close']] = MMS.inverse_transform(upcoming_prediction[['Open','Close']])

fg,ax=plt.subplots(figsize=(10,5))
ax.plot(gs_slic_data.loc['2021-04-25':,'Open'],label='Current Open Price')
ax.plot(upcoming_prediction.loc['2021-04-25':,'Open'],label='Upcoming Open Price')
plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
ax.set_xlabel('Date',size=15)
ax.set_ylabel('Stock Price',size=15)
ax.set_title('Upcoming Open price prediction',size=15)
ax.legend()
fg.show()

fg,ax=plt.subplots(figsize=(10,5))
ax.plot(gs_slic_data.loc['2021-04-25':,'Close'],label='Current Close Price')
ax.plot(upcoming_prediction.loc['2021-04-25':,'Close'],label='Upcoming close Price')
plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
ax.set_xlabel('Date',size=15)
ax.set_ylabel('Stock Price',size=15)
ax.set_title('Upcoming close price prediction',size=15)
ax.legend()
fg.show()